{
  "version": 3,
  "sources": ["../src/fft.ts", "../src/singleAnalyser.ts", "../src/multiAnalyszer.ts", "../src/load_sound.ts", "../src/render.ts", "../src/main.ts"],
  "sourcesContent": ["\r\n// FFT\u3092\u51E6\u7406\u3059\u308Bstatic\u306Aclass\r\nexport class FFT {\r\n    // \u97F3\u91CF\uFF08\u4EA4\u6D41\u5B9F\u52B9\u5024\uFF09\u3092\u8A08\u7B97\r\n    static getVolume(samples: Float32Array<ArrayBuffer>): number {\r\n        const sum = samples.reduce((a, b) => a + b, 0);\r\n        const average = sum / samples.length;\r\n        const sqsum = samples.reduce((a, b) => a + b * b, 0);\r\n        const sqaverage = sqsum / samples.length;\r\n\r\n        return Math.sqrt(sqaverage - average * average);\r\n    }\r\n\r\n    // \u76F4\u6D41\u6210\u5206\u9664\u53BB\r\n    static removeDC(samples: Float32Array<ArrayBuffer>): Float32Array<ArrayBuffer> {\r\n        const sum = samples.reduce((a, b) => a + b);\r\n        const average = sum / samples.length;\r\n\r\n        return samples.map(x => x - average);\r\n    }\r\n\r\n    static windowing(samples: Float32Array<ArrayBuffer>): Float32Array<ArrayBuffer> {\r\n        return samples.map((x, i) => x * (1.0 - Math.cos(2 * Math.PI * i / samples.length)) * 0.5);\r\n    }\r\n\r\n    static fft(_re: Float32Array<ArrayBuffer>, _im?: Float32Array<ArrayBuffer>): [Float32Array<ArrayBuffer>, Float32Array<ArrayBuffer>] {\r\n        // \u3053\u306E\u30A2\u30EB\u30B4\u30EA\u30BA\u30E0\u3067\u306F\u30A4\u30F3\u30D7\u30EC\u30A4\u30B9\u3067\u8A08\u7B97\u3059\u308B\u305F\u3081\u3001\u8907\u88FD\u3059\u308B\r\n        if(_im === undefined) _im = _re.map(x => 0);\r\n        const re = _re.map(x => x);\r\n        const im = _im.map(x => x);\r\n\r\n        if(re.length != im.length) throw new Error(\"length do not match\");\r\n        if(Math.log2(re.length) % 1 != 0) throw new Error(\"length must be 2^n\");\r\n\r\n        const n = re.length;\r\n        let m: number, mh: number, i: number, j: number, k: number, irev: number;\r\n\r\n        i = 0;\r\n        for (j = 1; j < n - 1; j++) {\r\n            for (k = n >> 1; k > (i ^= k); k >>= 1);\r\n            if (j < i) {\r\n                const xr = re[j];\r\n                const xi = im[j];\r\n                re[j] = re[i];\r\n                im[j] = im[i];\r\n                re[i] = xr;\r\n                im[i] = xi;\r\n            }\r\n        }\r\n        for (mh = 1; (m = mh << 1) <= n; mh = m) {\r\n            irev = 0;\r\n            for (i = 0; i < n; i += m) {\r\n                const wr = Math.cos(2 * Math.PI * irev / n);\r\n                const wi = Math.sin(2 * Math.PI * irev / n);\r\n                for (k = n >> 2; k > (irev ^= k); k >>= 1);\r\n                for (j = i; j < mh + i; j++) {\r\n                    k = j + mh;\r\n                    const xr = re[j] - re[k];\r\n                    const xi = im[j] - im[k];\r\n                    re[j] += re[k];\r\n                    im[j] += im[k];\r\n                    re[k] = wr * xr - wi * xi;\r\n                    im[k] = wr * xi + wi * xr;\r\n                }\r\n            }\r\n        }\r\n        return [re, im];\r\n    }\r\n\r\n    static ifft(re: Float32Array<ArrayBuffer>, im: Float32Array<ArrayBuffer>): [Float32Array<ArrayBuffer>, Float32Array<ArrayBuffer>] {\r\n        const n = re.length;\r\n        const [_real, _imag] = FFT.fft(re, im.map(x=>-x));\r\n        return [_real.map(x => x / n), _imag.map(x => -x / n), ]\r\n           \r\n    }\r\n\r\n    private fftConvolve(xReal: Float32Array<ArrayBuffer>, xImag: Float32Array<ArrayBuffer>, yReal: Float32Array<ArrayBuffer>, yImag: Float32Array<ArrayBuffer>): [Float32Array, Float32Array] {\r\n        if (xReal.length < yReal.length)\r\n            [xReal, xImag, yReal, yImag] = [yReal, yImag, xReal, xImag];\r\n        \r\n        const [xHatRe, xHatIm] = FFT.fft(xReal, xImag);\r\n        const [yHatRe, yHatIm] = FFT.fft(yReal, yImag);\r\n        const [ansRe, ansIm] = [new Float32Array(xReal.length), new Float32Array(xReal.length)];\r\n\r\n        for (let i = 0; i < xHatRe.length && i < yHatRe.length; i++) {\r\n            ansRe[i] = xHatRe[i] * yHatRe[i] - xHatIm[i] * yHatIm[i];\r\n            ansIm[i] = xHatRe[i] * yHatIm[i] + xHatIm[i] * yHatRe[i];\r\n        }\r\n\r\n        return FFT.ifft(ansRe, ansIm);\r\n    }\r\n\r\n    static getMagnitudes(real: Float32Array<ArrayBuffer>, imag: Float32Array<ArrayBuffer>): Float32Array<ArrayBuffer> {\r\n        return real.map((_, i) => Math.sqrt(real[i] * real[i] + imag[i] * imag[i]));\r\n    }\r\n}\r\n", "import { FFT } from \"./fft\";\r\n\r\nexport type InterpolationMode = \"step\" | \"linear\" | \"spline\";\r\n\r\n// \u89E3\u6790\u7D50\u679C\u3092\u4FDD\u6301\u3057\u3001\u305D\u308C\u306B\u30A2\u30AF\u30BB\u30B9\u3059\u308B\u624B\u6BB5\u3092\u63D0\u4F9B\u3059\u308B\r\nexport class SingleAnalyseResult {\r\n    private result: Float32Array<ArrayBuffer>;\r\n    private sampleRate: number;\r\n\r\n    constructor(result: Float32Array<ArrayBuffer>, sampleRate: number) {\r\n        this.result = result;\r\n        this.sampleRate = sampleRate;\r\n    }\r\n\r\n    get frequencyResolution() {\r\n        return this.sampleRate / this.result.length;\r\n    }\r\n\r\n    get maxValidFreq() {\r\n        return this.sampleRate / 2;\r\n    }\r\n\r\n    private freqToIndex(freq: number) {\r\n        return freq / this.frequencyResolution;\r\n    }\r\n\r\n    private indexToFreq(index: number) {\r\n        return index * this.frequencyResolution;\r\n    }\r\n\r\n    getFrequencyValue_Step(freq: number): number {\r\n        const index = this.freqToIndex(freq);\r\n        return this.result[Math.round(index)] | 0;\r\n    }\r\n\r\n    getFrequencyValue_Linear(freq: number): number {\r\n        const index = this.freqToIndex(freq);\r\n\r\n        // index\u524D\u5F8C\u306E\u30C7\u30FC\u30BF\r\n        const a = this.result[Math.floor(index)] | 0;\r\n        const b = this.result[Math.floor(index) + 1] | 0;\r\n        // \u5185\u5206\u6BD4\r\n        const t = index - Math.floor(index);\r\n        //\u7DDA\u5F62\u88DC\u9593\r\n        return a + (b - a) * t;\r\n    }\r\n\r\n    getFrequencyValue_Spline(freq: number): number {\r\n        const index = this.freqToIndex(freq);\r\n\r\n        // index\u524D\u5F8C\u306E\u30C7\u30FC\u30BF\r\n        const aa = this.result[Math.floor(index) - 1] | 0;\r\n        const a = this.result[Math.floor(index)] | 0;\r\n        const b = this.result[Math.floor(index) + 1] | 0;\r\n        const bb = this.result[Math.floor(index) + 2] | 0;\r\n        const a_ = (b - aa) / 2; // a \u3067\u306E\u50BE\u304D\r\n        const b_ = (bb - a) / 2; // b \u3067\u306E\u50BE\u304D\r\n        // \u5185\u5206\u6BD4\r\n        const t = index - Math.floor(index);\r\n        const t2 = t * t;\r\n        const t3 = t2 * t;\r\n        const p = 2 * a + a_ - 2 * b + b_;\r\n        const q = -3 * a - 2 * a_ + 3 * b - b_;\r\n        //\u4E09\u6B21\u30B9\u30D7\u30E9\u30A4\u30F3\u88DC\u5B8C\r\n        return p * t3 + q * t2 + a_ * t + a;\r\n    }\r\n\r\n    getFrequencyValue(freq: number, mode: InterpolationMode) {\r\n        switch (mode) {\r\n            case \"spline\":\r\n                return this.getFrequencyValue_Spline(freq);\r\n            case \"linear\":\r\n                return this.getFrequencyValue_Linear(freq);\r\n            case \"step\":\r\n                return this.getFrequencyValue_Step(freq);\r\n        }\r\n    }\r\n\r\n    // \u7BC4\u56F2\u5185\u306E\u30D4\u30FC\u30AF\u3068\u5468\u6CE2\u6570\u3092\u6C42\u3081\u308B\r\n    getPeak(minFreq: number, maxFreq: number): [number, number] {\r\n        const minIndex = Math.floor(this.freqToIndex(minFreq));\r\n        const maxIndex = Math.ceil(this.freqToIndex(maxFreq));\r\n\r\n        let [peakFreq, peakValue] = [minFreq, -Infinity];\r\n\r\n        for (let i = minIndex; i <= maxIndex; i++) {\r\n            const freq = this.indexToFreq(i);\r\n            const value = this.result[i];\r\n            // todo \u30B5\u30D6\u30B9\u30C6\u30C3\u30D7\u5468\u6CE2\u6570\u63A8\u5B9A\r\n            if (peakValue < value)\r\n                if (minFreq <= freq && freq < maxFreq)\r\n                    [peakFreq, peakValue] = [freq, value];\r\n        }\r\n\r\n        return [peakFreq, peakValue];\r\n    }\r\n}\r\n\r\n// \u4E00\u5B9A\u306E\u30B5\u30F3\u30D7\u30EB\u30B5\u30A4\u30BA\u3067\u30AA\u30FC\u30C7\u30A3\u30AA\u306E\u5468\u6CE2\u6570\u89E3\u6790\u3092\u884C\u3046\r\nexport class SingleAnalyser {\r\n    private buffer: Float32Array<ArrayBuffer>;\r\n    private sampleRate;\r\n\r\n    constructor(buffer: Float32Array<ArrayBuffer>, sampleRate: number) {\r\n        this.buffer = buffer;\r\n        this.sampleRate = sampleRate;\r\n    }\r\n\r\n    // \u4E0E\u3048\u3089\u308C\u305F\u6642\u523B\u524D\u5F8C\u306B\u3064\u3044\u3066\u3001FFT\u89E3\u6790\u3092\u884C\u3044\u3001\u89E3\u6790\u7D50\u679C\u3092\u8FD4\u3059\r\n    analyseAt(ms: number, sampleSize: number): SingleAnalyseResult {\r\n        const centerIndex = this.msToIndex(ms);\r\n\r\n        // centerIndex\u304C\u4E2D\u592E\u306B\u306A\u308B\u3088\u3046\u306B\u30B5\u30F3\u30D7\u30EB\u533A\u9593\u3092\u53D6\u308B \uFF08\u7BC4\u56F2\u5916\u306E\u5834\u5408\u3001undefined\u306B\u306A\u308B\u306F\u305A\u306A\u306E\u3067||0 \u30670\u306B\u7F6E\u63DB\uFF09\r\n        const samples = Float32Array.from({ length: sampleSize }).map((_, i) => this.buffer[i + centerIndex - sampleSize / 2] || 0);\r\n\r\n        //FFT\u3092\u5B9F\u884C\r\n        const result = FFT.fft(FFT.windowing(FFT.removeDC(samples)));\r\n\r\n        return new SingleAnalyseResult(FFT.getMagnitudes(...result), this.sampleRate);\r\n    }\r\n\r\n    // \u4E0E\u3048\u3089\u308C\u305F\u518D\u751F\u6642\u523B(ms)\u304C\u4F55\u756A\u76EE\u306E\u30B5\u30F3\u30D7\u30EB\u304B\r\n    private msToIndex(time: number) {\r\n        // i\u756A\u76EE\u306E\u30B5\u30F3\u30D7\u30EB\u306Fi\uFF5Ei+1\u307E\u3067\u306E\u533A\u9593\u3092\u4EE3\u8868\u3059\u308B\uFF08i-0.5\uFF5Ei+0.5\u3068\u3059\u308B\u3068\u30C0\u30A6\u30F3\u30B5\u30F3\u30D7\u30EA\u30F3\u30B0\u3059\u308B\u3068\u304D\u56F0\u308B\uFF09\r\n        return Math.floor(time * this.sampleRate / 1000);\r\n    }\r\n    // \u4E0E\u3048\u3089\u308C\u305F\u30B5\u30F3\u30D7\u30EB\u756A\u53F7\u304C\u4F55ms\u3081\u304B\r\n    private indexToMs(index: number) {\r\n        return index / this.sampleRate * 1000;\r\n    }\r\n}", "import { SingleAnalyser, SingleAnalyseResult, InterpolationMode } from \"./singleAnalyser\";\r\n\r\nexport type AnalyseResult = SingleAnalyseResult | MultiAnalyseResult\r\n\r\nexport class MultiAnalyseResult {\r\n    results: SingleAnalyseResult[];\r\n    constructor(results: SingleAnalyseResult[]) {\r\n        this.results = results;\r\n    }\r\n\r\n    getFrequencyValue(freq: number, mode: InterpolationMode) {\r\n        // \u5468\u6CE2\u6570\u306B\u5BFE\u3057\u3066maxFrequency\u3092\u8D85\u3048\u306A\u3044\u6700\u5927\u306E\u30AA\u30AF\u30BF\u30FC\u30D6\u3092\u6C42\u3081\u308B\r\n        // this.results[i].maxFrequency\u306Fi\u304C\u5897\u3048\u308B\u307B\u3069\u5C0F\u3055\u304F\u306A\u308B\r\n        let i = 0;\r\n        while ((i + 1) < this.results.length && freq < this.results[i + 1].maxValidFreq) i++;\r\n\r\n        // \u6700\u9069\u3067\u306A\u3044\u30AA\u30AF\u30BF\u30FC\u30D6\u3082\u53C2\u7167\u3057\u3066\u63A5\u7D9A\u90E8\u3092\u6ED1\u3089\u304B\u306B\u3059\u308B\uFF1F\r\n        return this.results[i].getFrequencyValue(freq, mode);\r\n    }\r\n\r\n    getPeak(minFreq: number, maxFreq: number): [number, number] {\r\n        // \u5468\u6CE2\u6570\u306B\u5BFE\u3057\u3066maxFrequency\u3092\u8D85\u3048\u306A\u3044\u6700\u5927\u306E\u30AA\u30AF\u30BF\u30FC\u30D6\u3092\u6C42\u3081\u308B\r\n        // this.results[i].maxFrequency\u306Fi\u304C\u5897\u3048\u308B\u307B\u3069\u5C0F\u3055\u304F\u306A\u308B\r\n        let i = 0;\r\n        while ((i + 1) < this.results.length && maxFreq < this.results[i + 1].maxValidFreq) i++;\r\n\r\n        // \u6700\u9069\u3067\u306A\u3044\u30AA\u30AF\u30BF\u30FC\u30D6\u3082\u53C2\u7167\u3057\u3066\u63A5\u7D9A\u90E8\u3092\u6ED1\u3089\u304B\u306B\u3059\u308B\uFF1F\r\n        return this.results[i].getPeak(minFreq, maxFreq);\r\n    }\r\n}\r\n\r\n// \u8907\u6570\u306E\u30B5\u30F3\u30D7\u30EB\u30B5\u30A4\u30BA\u3092\u7D44\u307F\u5408\u308F\u305B\u3066\u30AA\u30FC\u30C7\u30A3\u30AA\u306E\u5468\u6CE2\u6570\u89E3\u6790\u3092\u884C\u3046\r\nexport class MultiAnalyser {\r\n    analysers: SingleAnalyser[];\r\n\r\n    constructor(buffer: Float32Array<ArrayBuffer>, sampleRate: number, numOctoves: number) {\r\n        this.analysers = [];\r\n        for (let i = 0; i < numOctoves; i++) {\r\n            this.analysers[i] = new SingleAnalyser(buffer, sampleRate);\r\n\r\n            // buffer\u3092\u534A\u5206\u306B\u30C0\u30A6\u30F3\u30B5\u30F3\u30D7\u30EA\u30F3\u30B0\r\n            buffer = Float32Array.from({ length: Math.floor(buffer.length / 2) }).map((_, i) => (buffer[2 * i] + buffer[2 * i + 1]) / 2);\r\n            // sampleRate\u3082\u534A\u5206\u306B\u3059\u308B\r\n            sampleRate /= 2;\r\n        }\r\n    }\r\n\r\n    // \u4E0E\u3048\u3089\u308C\u305F\u6642\u523B\u524D\u5F8C\u306B\u3064\u3044\u3066\u3001FFT\u89E3\u6790\u3092\u884C\u3044\u3001\u89E3\u6790\u7D50\u679C\u3092\u8FD4\u3059\r\n    analyseAt(ms: number, sampleSize: number): MultiAnalyseResult {\r\n        // \u5404\u30A2\u30CA\u30E9\u30A4\u30B6\u30FC\u3092\u9806\u6B21\u8D77\u52D5\u3057\u3066OctoveAnalyseResultn\u306B\u7D50\u679C\u3092\u307E\u3068\u3081\u308B\r\n        return new MultiAnalyseResult(this.analysers.map(analyser => analyser.analyseAt(ms, sampleSize)));\r\n    }\r\n}", "import { SingleAnalyser } from \"./singleAnalyser\";\r\nimport { MultiAnalyser } from \"./multiAnalyszer\";\r\n\r\nexport let audioBuffer: AudioBuffer | null = null;\r\nexport let channelData: Float32Array<ArrayBuffer> | null = null;\r\nexport let singleAnalyser: SingleAnalyser | null = null;\r\nexport let octoveAnalyzer: MultiAnalyser | null = null;\r\n\r\nexport let playStartTime = 0;\r\n\r\n\r\ndocument.getElementById(\"file\")?.addEventListener(\"change\", async (e) => {\r\n    const input = e.target as HTMLInputElement;\r\n    if (!input.files || input.files.length === 0) return;\r\n\r\n    const file = input.files[0];\r\n    const audioContext = new AudioContext();\r\n    const fileReader = new FileReader();\r\n\r\n    fileReader.readAsArrayBuffer(file);\r\n    fileReader.onload = async () => {\r\n        // \u4E8B\u524D\u89E3\u6790\u5668\u306E\u6E96\u5099\r\n        audioBuffer = await audioContext.decodeAudioData(fileReader.result as ArrayBuffer);\r\n        channelData = audioBuffer.getChannelData(0);\r\n        singleAnalyser = new SingleAnalyser(channelData, audioBuffer.sampleRate);\r\n        octoveAnalyzer = new MultiAnalyser(channelData, audioBuffer.sampleRate, 8);\r\n\r\n        // \u30AA\u30FC\u30C7\u30A3\u30AA\u30B3\u30F3\u30C6\u30AF\u30B9\u30C8\u3092\u69CB\u6210\u3057\u3066\u518D\u751F\r\n        const source = audioContext.createBufferSource();\r\n        const gainNode = audioContext.createGain();\r\n\r\n        source.buffer = audioBuffer;\r\n        source.connect(gainNode);\r\n        gainNode.connect(audioContext.destination)\r\n        source.start();\r\n        playStartTime = performance.now();\r\n\r\n        source.addEventListener(\"ended\", () => {\r\n            singleAnalyser = null;\r\n            octoveAnalyzer = null;\r\n            channelData = null;\r\n        })\r\n    };\r\n});", "import { AnalyseResult } from \"./multiAnalyszer\";\r\n\r\nimport type p5_ from \"p5\"; // \u30A4\u30F3\u30B9\u30BF\u30F3\u30B9\u306E\u578B\u540D\u306Fp5\u3060\u3068\u2193\u3068\u88AB\u308B\u306E\u3067\u30BA\u30E9\u3059\r\ndeclare const p5: typeof p5_; // \u5916\u90E8\u3067\u5024\u3068\u3057\u3066\u306Ep5\u304C\u5B9F\u88C5\u3055\u308C\u3066\u3044\u308B\u3053\u3068\u3092\u5BA3\u8A00\r\n\r\n/**\r\n * @param freq \u5468\u6CE2\u6570\r\n * @returns A0\u30920\u3068\u3057\u3066\u300112\u5E73\u5747\u5F8B\u3067\u4F55\u756A\u76EE\u306E\u97F3\u968E\u304B \u5C0F\u6570\u3092\u542B\u3080\r\n */\r\nfunction freqToTone(freq: number) {\r\n    return Math.log2(freq / 27.5) * 12;\r\n}\r\n/**\r\n * @param tone A0\u30920\u3068\u3057\u305F\u97F3\u968E\u30A4\u30F3\u30C7\u30C3\u30AF\u30B9\r\n * @returns \u5468\u6CE2\u6570\uFF0812\u5E73\u5747\u5F8B\uFF09\r\n */\r\nfunction toneToFreq(tone: number) {\r\n    return Math.pow(2, tone / 12) * 27.5;\r\n}\r\n/**\r\n * \r\n * @param tone A0\u30920\u3068\u3057\u305F\u97F3\u968E\u30A4\u30F3\u30C7\u30C3\u30AF\u30B9\r\n * @returns \u968E\u540D\uFF08A0, A#0, B0, C1, C#1...\uFF09\r\n */\r\n\r\nfunction toneToTonename(tone: number) {\r\n    tone = Math.round(tone);\r\n    const octove = Math.floor((tone + 9) / 12);\r\n    const toneName = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"][tone % 12]\r\n    return toneName + octove;\r\n}\r\n\r\nexport function tonalAnalyze(result: AnalyseResult) {\r\n    const ans = Array.from({ length: 88 }).fill(0).map(x => 0);\r\n    for (let tone = 0; tone < 88; tone++) {\r\n        const minFreq = toneToFreq(tone - 0.5);\r\n        const maxFreq = toneToFreq(tone + 0.5);\r\n        const [peak, value] = result.getPeak(minFreq, maxFreq);\r\n        ans[tone % 12] += value;\r\n    }\r\n    return ans;\r\n}\r\n\r\nexport function transitionAnalyse(result1: AnalyseResult, result2: AnalyseResult) {\r\n    const values1 = tonalAnalyze(result1);\r\n    const values2 = tonalAnalyze(result2);\r\n\r\n    const increase = values1.map((x, i) => Math.max(0, values2[i] - values1[i]));\r\n    const decrease = values1.map((x, i) => Math.max(0, values1[i] - values2[i]));\r\n\r\n    const transition = decrease.map(x => increase.map(y => x * y));\r\n    transition.forEach((row, i) => row.forEach((data, j) => { accumTransition[i][j] += data }));\r\n    accumCount++;\r\n\r\n    // \u767E\u307E\u3059\u8A08\u7B97\r\n    return decrease.map(x => increase.map(y => x * y));\r\n}\r\n\r\nexport function drawTonalGrayscale(p: p5_, x: number, result: AnalyseResult) {\r\n    const tonalValues = tonalAnalyze(result);\r\n\r\n    p.push();\r\n    for (let tone = 0; tone < 88; tone++) {\r\n        const toneName = toneToTonename(tone);\r\n        const brightness = tonalValues[tone] * 100;\r\n        p.fill(brightness);\r\n        p.noStroke();\r\n        p.text(toneName, x, 940 - tone * 10);\r\n    }\r\n    p.pop();\r\n}\r\n\r\nexport function drawMatrixHeatmap(p: p5_, matrix: number[][], x: number, y: number, size: number, gain: number) {\r\n    p.push();\r\n    p.noStroke();\r\n    matrix.forEach((row, i) => row.forEach((data, j) => {\r\n        const brightness = data * gain;\r\n        p.fill(brightness);\r\n        p.rect(x + i * size, y + j * size, size, size);\r\n    }));\r\n    p.pop();\r\n}\r\n\r\nlet accumTransition: number[][] = Array.from({ length: 88 }).fill(0).map(x => Array.from({ length: 88 }).fill(0).map(x => 0));\r\nlet accumCount = 0;\r\n\r\nexport function drawTransition(p: p5_, result1: AnalyseResult, result2: AnalyseResult) {\r\n    p.push();\r\n    const x1 = 100;\r\n    const x2 = 700;\r\n    drawTonalGrayscale(p, x1, result1);\r\n    drawTonalGrayscale(p, x2, result2);\r\n\r\n    p.blendMode(p.ADD);\r\n\r\n    const transition = transitionAnalyse(result1, result2);\r\n    for (let tone1 = 0; tone1 < 88; tone1++) {\r\n        for (let tone2 = 0; tone2 < 88; tone2++) {\r\n            const brightness = transition[tone1][tone2] * 100;\r\n\r\n            p.noFill();\r\n            p.stroke(brightness);\r\n            p.line(x1 + 50, 940 - tone1 * 10, x2, 940 - tone2 * 10);\r\n        }\r\n    }\r\n\r\n    const accumMax = Math.max(...accumTransition.map(x => Math.max(...x)));\r\n    drawMatrixHeatmap(p, accumTransition, 1800, 940, -10, 255 / accumMax);\r\n\r\n    p.pop();\r\n}\r\n\r\n\r\nexport function drawSpectrum(p: p5_, x: number, result: AnalyseResult) {\r\n    p.push();\r\n\r\n    p.noFill();\r\n    p.stroke(255);\r\n    p.beginShape();\r\n\r\n    for (let freq = 55; freq < 24000; freq += 1) {\r\n        const value = result.getFrequencyValue(freq, \"spline\") * 30;\r\n        const tone = freqToTone(freq);\r\n        p.vertex(x + value, tone * 10);\r\n    }\r\n\r\n    p.endShape();\r\n\r\n    p.pop();\r\n}\r\n\r\nexport function drawSpectrumGrayscale(p: p5_, x: number, result: AnalyseResult) {\r\n    p.push();\r\n    for (let y = 0; y < 1000; y += 1) {\r\n        const tone = (1000 - y) / 10 - 12;\r\n        const freq = toneToFreq(tone);\r\n        const value = result.getFrequencyValue(freq, \"spline\");\r\n        const brightness = value * 30;\r\n        p.stroke(brightness);\r\n\r\n        p.point(x, y);\r\n    }\r\n    p.pop();\r\n}", "import type p5_ from \"p5\"; // \u30A4\u30F3\u30B9\u30BF\u30F3\u30B9\u306E\u578B\u540D\u306Fp5\u3060\u3068\u2193\u3068\u88AB\u308B\u306E\u3067\u30BA\u30E9\u3059\r\nimport { audioBuffer, octoveAnalyzer, playStartTime, singleAnalyser } from \"./load_sound\";\r\nimport { drawSpectrumGrayscale, drawTonalGrayscale, drawTransition } from \"./render\";\r\ndeclare const p5: typeof p5_; // \u5916\u90E8\u3067\u5024\u3068\u3057\u3066\u306Ep5\u304C\u5B9F\u88C5\u3055\u308C\u3066\u3044\u308B\u3053\u3068\u3092\u5BA3\u8A00\r\n\r\n\r\nlet x = 100;\r\nlet y = 100;\r\n\r\n// p5\u306E\u30A4\u30F3\u30B9\u30BF\u30F3\u30B9\u30E2\u30FC\u30C9\u3067\u66F8\u304F\r\nconst sketch = (p5: p5_) => {\r\n  p5.setup = () => {\r\n    p5.createCanvas(1920, 1080);\r\n    p5.background(0, 0, 0);\r\n    p5.frameRate(60);\r\n  };\r\n  p5.draw = () => {\r\n    if (!audioBuffer || !singleAnalyser || !octoveAnalyzer) return;\r\n\r\n    //const result = singleAnalyzer.analyseAt(performance.now() - playStartTime, 8192);\r\n    const result = octoveAnalyzer.analyseAt(performance.now() - playStartTime, 256);\r\n\r\n    const result2 = octoveAnalyzer.analyseAt(performance.now() - playStartTime + 250, 256);\r\n\r\n    p5.background(0);\r\n    drawTransition(p5, result, result2);\r\n\r\n    drawTonalGrayscale(p5, 10, result);\r\n    drawSpectrumGrayscale(p5, x, result);\r\n    // result.results.forEach(r => drawSpectrumColor(p5, x, r));\r\n    // drawSpectrumColor(p5, x, result.results[4]);\r\n  };\r\n};\r\n\r\nnew p5(sketch);\r\n"],
  "mappings": "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",
  "names": ["x", "i", "x", "x", "p5"]
}
